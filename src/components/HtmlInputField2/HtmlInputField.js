import classNames from 'classnames';
import { useEffect, useState, useRef } from 'react';
import { init } from 'pell';

import styles from './HtmlInputField.module.scss';

const HtmlInputField = ({ error, value = '', onChange, className, placeholder, focus = false }) => {
  const [editor, setEditor] = useState();
  const [content, setContent] = useState(value);

  const editorRef = useRef();

  useEffect(() => {
    const editor = init({
      element: editorRef.current,
      onChange: setContent,
      actions: [
        {
          name: 'bold',
          title: 'Bold',
          icon: `<svg  viewbox="0 0 21 21" xmlns="http://www.w3.org/2000/svg"><path d="M14.3104 9.87246C14.9994 9.15469 15.4219 8.18467 15.4219 7.11826V6.90908C15.4219 4.70244 13.6151 2.91211 11.388 2.91211H5.31973C5.01006 2.91211 4.75781 3.16436 4.75781 3.47402V17.4009C4.75781 17.7352 5.02852 18.0059 5.36279 18.0059H11.8986C14.298 18.0059 16.2422 16.074 16.2422 13.689V13.4634C16.2422 11.9663 15.4752 10.6477 14.3104 9.87246ZM6.72656 4.88086H11.3347C12.5057 4.88086 13.4531 5.79141 13.4531 6.91728V7.11211C13.4531 8.23594 12.5036 9.14854 11.3347 9.14854H6.72656V4.88086ZM14.2447 13.6869C14.2447 14.9769 13.1845 16.0228 11.8761 16.0228H6.72656V11.1296H11.8761C13.1845 11.1296 14.2447 12.1755 14.2447 13.4654V13.6869Z" /></svg>`
        },
        {
          name: 'ulist',
          title: 'Bullet list',
          icon: `<svg  viewbox="0 0 21 21" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M8.75 3.5H17.5C17.7321 3.5 17.9546 3.59219 18.1187 3.75628C18.2828 3.92038 18.375 4.14294 18.375 4.375C18.375 4.60706 18.2828 4.82962 18.1187 4.99372C17.9546 5.15781 17.7321 5.25 17.5 5.25H8.75C8.51794 5.25 8.29538 5.15781 8.13128 4.99372C7.96719 4.82962 7.875 4.60706 7.875 4.375C7.875 4.14294 7.96719 3.92038 8.13128 3.75628C8.29538 3.59219 8.51794 3.5 8.75 3.5ZM8.75 9.625H17.5C17.7321 9.625 17.9546 9.71719 18.1187 9.88128C18.2828 10.0454 18.375 10.2679 18.375 10.5C18.375 10.7321 18.2828 10.9546 18.1187 11.1187C17.9546 11.2828 17.7321 11.375 17.5 11.375H8.75C8.51794 11.375 8.29538 11.2828 8.13128 11.1187C7.96719 10.9546 7.875 10.7321 7.875 10.5C7.875 10.2679 7.96719 10.0454 8.13128 9.88128C8.29538 9.71719 8.51794 9.625 8.75 9.625ZM8.75 15.75H17.5C17.7321 15.75 17.9546 15.8422 18.1187 16.0063C18.2828 16.1704 18.375 16.3929 18.375 16.625C18.375 16.8571 18.2828 17.0796 18.1187 17.2437C17.9546 17.4078 17.7321 17.5 17.5 17.5H8.75C8.51794 17.5 8.29538 17.4078 8.13128 17.2437C7.96719 17.0796 7.875 16.8571 7.875 16.625C7.875 16.3929 7.96719 16.1704 8.13128 16.0063C8.29538 15.8422 8.51794 15.75 8.75 15.75ZM4.375 6.125C3.91087 6.125 3.46575 5.94063 3.13756 5.61244C2.80937 5.28425 2.625 4.83913 2.625 4.375C2.625 3.91087 2.80937 3.46575 3.13756 3.13756C3.46575 2.80937 3.91087 2.625 4.375 2.625C4.83913 2.625 5.28425 2.80937 5.61244 3.13756C5.94063 3.46575 6.125 3.91087 6.125 4.375C6.125 4.83913 5.94063 5.28425 5.61244 5.61244C5.28425 5.94063 4.83913 6.125 4.375 6.125ZM4.375 12.25C3.91087 12.25 3.46575 12.0656 3.13756 11.7374C2.80937 11.4092 2.625 10.9641 2.625 10.5C2.625 10.0359 2.80937 9.59075 3.13756 9.26256C3.46575 8.93437 3.91087 8.75 4.375 8.75C4.83913 8.75 5.28425 8.93437 5.61244 9.26256C5.94063 9.59075 6.125 10.0359 6.125 10.5C6.125 10.9641 5.94063 11.4092 5.61244 11.7374C5.28425 12.0656 4.83913 12.25 4.375 12.25ZM4.375 18.375C3.91087 18.375 3.46575 18.1906 3.13756 17.8624C2.80937 17.5342 2.625 17.0891 2.625 16.625C2.625 16.1609 2.80937 15.7158 3.13756 15.3876C3.46575 15.0594 3.91087 14.875 4.375 14.875C4.83913 14.875 5.28425 15.0594 5.61244 15.3876C5.94063 15.7158 6.125 16.1609 6.125 16.625C6.125 17.0891 5.94063 17.5342 5.61244 17.8624C5.28425 18.1906 4.83913 18.375 4.375 18.375Z" />
          </svg>`
        },
        {
          name: 'olist',
          title: 'Numeric list',
          icon: `<svg viewbox="0 0 19 17" xmlns="http://www.w3.org/2000/svg"><path d="M2.15219 8.572C1.68406 8.941 1.36469 9.25712 1.19516 9.52938C1.02563 9.79937 0.922812 10.0896 0.89 10.3934H3.82016V9.55188H2.29547C2.38406 9.46075 2.46172 9.382 2.52734 9.32575C2.59516 9.2695 2.72641 9.166 2.92219 9.022C3.25359 8.77675 3.48109 8.5495 3.60687 8.3425C3.73375 8.13325 3.79609 7.92062 3.79609 7.69225C3.79908 7.48747 3.74148 7.28659 3.63094 7.11625C3.52241 6.94398 3.36513 6.81008 3.18031 6.73263C2.99 6.64712 2.72203 6.60775 2.37859 6.60775C2.05047 6.60775 1.79125 6.6505 1.60641 6.736C1.42837 6.81545 1.27753 6.94788 1.17328 7.11625C1.07047 7.27713 0.999375 7.5055 0.961094 7.79575L1.93891 7.88125C1.96625 7.66975 2.01984 7.52462 2.09969 7.438C2.13972 7.39729 2.18748 7.3655 2.23998 7.34459C2.29247 7.32369 2.3486 7.31413 2.40484 7.3165C2.52516 7.3165 2.62359 7.35587 2.70234 7.438C2.7407 7.47517 2.77103 7.52022 2.79138 7.57022C2.81173 7.62022 2.82164 7.67406 2.82047 7.72825C2.81372 7.84911 2.77265 7.96528 2.70234 8.06238C2.62141 8.17712 2.43875 8.34812 2.15219 8.572ZM2.21234 15.7563C2.09846 15.7599 1.98773 15.7175 1.90391 15.6381C1.82297 15.5594 1.76391 15.4187 1.72672 15.2129L0.75 15.3456C0.814531 15.5751 0.905312 15.7641 1.02453 15.9149C1.14375 16.0645 1.29578 16.1792 1.48063 16.2591C1.66438 16.3367 1.91703 16.375 2.2375 16.375C2.56563 16.375 2.82922 16.3221 3.03047 16.2175C3.22553 16.1173 3.38702 15.9594 3.49422 15.7641C3.60141 15.5673 3.65391 15.3659 3.65391 15.1521C3.65792 14.9988 3.62484 14.8469 3.55766 14.71C3.49305 14.5896 3.39922 14.4884 3.28531 14.4164C3.18773 14.3591 3.08226 14.3174 2.9725 14.2926C3.12317 14.214 3.25275 14.0985 3.34984 13.9563C3.43247 13.8288 3.47557 13.6786 3.47344 13.5254C3.47546 13.3969 3.44881 13.2696 3.39553 13.1534C3.34224 13.0371 3.26376 12.935 3.16609 12.8549C2.96156 12.676 2.63016 12.5871 2.17188 12.5871C1.77266 12.5871 1.46313 12.6681 1.24547 12.8335C1.02672 12.9944 0.880156 13.2306 0.803594 13.5378L1.72672 13.7076C1.75188 13.5254 1.8 13.3994 1.87219 13.3274C1.94438 13.2554 2.03734 13.2171 2.15328 13.2171C2.20149 13.2148 2.24966 13.2225 2.29494 13.2397C2.34022 13.2569 2.38168 13.2833 2.41688 13.3172C2.48141 13.3847 2.51203 13.4736 2.51203 13.585C2.51203 13.702 2.47047 13.8021 2.38406 13.8888C2.29766 13.9754 2.19047 14.0148 2.06359 14.0148C2.02109 14.0134 1.97871 14.0093 1.93672 14.0024L1.8875 14.7325C1.98974 14.6974 2.09601 14.6762 2.20359 14.6695C2.34797 14.6695 2.46281 14.7156 2.54594 14.8113C2.63016 14.9035 2.67172 15.0351 2.67172 15.2072C2.67172 15.3715 2.62797 15.5065 2.54156 15.6055C2.50052 15.6536 2.44984 15.6919 2.39301 15.718C2.33618 15.744 2.27455 15.7571 2.21234 15.7563ZM3.24922 4.41287V0.625H2.44094C2.34213 0.851956 2.19483 1.05307 2.01 1.21337C1.82625 1.37312 1.56812 1.50813 1.23562 1.624V2.47225C1.60952 2.36617 1.95831 2.18238 2.26047 1.93225V4.414H3.24922V4.41287ZM6.21875 1.75H18.25V4H6.21875V1.75ZM6.21875 7.375H18.25V9.625H6.21875V7.375ZM6.21875 13H18.25V15.25H6.21875V13Z" /></svg>`
        }
      ],
      styleWithCSS: false,
      defaultParagraphSeparator: 'p',
      classes: {
        actionbar: styles['html-input-field-input-actionbar'],
        button:  styles['html-input-field-input-button'],
        content:  styles['html-input-field-input-content'],
        selected:  styles['html-input-field-input-selected']
      }
    })

    setEditor(editor);

    editor.content.innerHTML = value;

    const editorClickHandler = () => {
      editor.content.focus()
    }

    editorRef.current.onclick = editorClickHandler

    if (focus) {
      editor.content.focus()
    }
  }, [])
  

  useEffect(() => {
    if (content != value) {
      onChange && onChange(content);
    }
  }, [content, value])

  return <div data-test-id="html-input-field" className={classNames(styles['html-input-field'], className)}>
    <div className={styles['html-input-field-placeholder']}>{!content ? placeholder : null}</div>
    <div ref={editorRef} className={styles['html-input-field-input']}></div>
    {error ? <p className="form-error">{error}</p> : null}
  </div>
}

export default HtmlInputField;
